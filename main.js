/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// main.ts
var main_exports = {};
__export(main_exports, {
  SmartConnectionsSettingsTab: () => SmartConnectionsSettingsTab,
  default: () => SmartConnectionsPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/settings/settings.ts
var loadSettings = async (configurable, defaultSettings, loadFunction) => {
  const settings = await loadFunction() || defaultSettings;
  return Object.assign({}, settings);
};

// data/defaultSettings.json
var DEFAULT_SETTINGS = {
  algorithm: "OpenAI",
  apiKey: [],
  fileExclusions: [],
  folderExclusions: [],
  headerExclusions: [],
  pathOnly: [],
  showFullPath: false,
  logRender: false,
  logRenderFiles: false,
  skipSections: false
};

// src/plugin.ts
var SmartConnectionsPluginBase = class {
  constructor(pluginConcrete) {
    /**
     * This class is an adapter (? todo: check if true) to facilitate unit-testing with Obsidian.
     * @private
     */
    __publicField(this, "pluginConcrete");
    __publicField(this, "settings");
    this.pluginConcrete = pluginConcrete;
  }
  async onLoad() {
    this.settings = await loadSettings(
      this,
      DEFAULT_SETTINGS,
      this.pluginConcrete.loadData.bind(this.pluginConcrete)
    );
    this.addSettingTab();
  }
  async saveSettings() {
    await this.pluginConcrete.saveData(this.settings);
  }
  addSettingTab() {
    const concreteSettingsTab = this.pluginConcrete.createConcreteSettingsTab();
    return this.pluginConcrete.addSettingTab(concreteSettingsTab);
  }
};
var SmartConnectionsSettingsTabBase = class {
  constructor(settingsTabConcrete) {
    __publicField(this, "settingsTabConcrete");
    this.settingsTabConcrete = settingsTabConcrete;
  }
  display() {
    const {
      containerEl
    } = this.settingsTabConcrete;
    containerEl.empty();
    containerEl.createEl("h2", {
      text: "Smart Connections Settings"
    });
  }
};

// main.ts
var SmartConnectionsPlugin = class extends import_obsidian.Plugin {
  constructor(app, manifest) {
    super(app, manifest);
    __publicField(this, "base");
    this.base = new SmartConnectionsPluginBase(this);
  }
  async onload() {
    await this.base.onLoad();
  }
  createConcreteSettingsTab() {
    return new SmartConnectionsSettingsTab(this.app, this);
  }
};
var SmartConnectionsSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    __publicField(this, "base");
    this.base = new SmartConnectionsSettingsTabBase(this);
  }
  display() {
    this.base.display();
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJzcmMvc2V0dGluZ3Mvc2V0dGluZ3MudHMiLCAiZGF0YS9kZWZhdWx0U2V0dGluZ3MuanNvbiIsICJzcmMvcGx1Z2luLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQge0FwcCwgUGx1Z2luLCBQbHVnaW5fMiwgUGx1Z2luTWFuaWZlc3QsIFBsdWdpblNldHRpbmdUYWJ9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHtcbiAgICBQbHVnaW5Db25jcmV0ZSxcbiAgICBQbHVnaW5TZXR0aW5nVGFiQ29uY3JldGUsXG4gICAgU21hcnRDb25uZWN0aW9uc1BsdWdpbkJhc2UsXG4gICAgU21hcnRDb25uZWN0aW9uc1NldHRpbmdzVGFiQmFzZVxufSBmcm9tIFwiLi9zcmMvcGx1Z2luXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNtYXJ0Q29ubmVjdGlvbnNQbHVnaW4gZXh0ZW5kcyBQbHVnaW4gaW1wbGVtZW50cyBQbHVnaW5Db25jcmV0ZSB7XG4gICAgYmFzZTogU21hcnRDb25uZWN0aW9uc1BsdWdpbkJhc2U7XG5cbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgbWFuaWZlc3Q6IFBsdWdpbk1hbmlmZXN0KSB7XG4gICAgICAgIHN1cGVyKGFwcCwgbWFuaWZlc3QpO1xuICAgICAgICB0aGlzLmJhc2UgPSBuZXcgU21hcnRDb25uZWN0aW9uc1BsdWdpbkJhc2UodGhpcyk7XG4gICAgfVxuXG4gICAgYXN5bmMgb25sb2FkKCkge1xuICAgICAgICBhd2FpdCB0aGlzLmJhc2Uub25Mb2FkKCk7XG4gICAgfVxuXG4gICAgY3JlYXRlQ29uY3JldGVTZXR0aW5nc1RhYigpOiBQbHVnaW5TZXR0aW5nVGFiQ29uY3JldGUge1xuICAgICAgICByZXR1cm4gbmV3IFNtYXJ0Q29ubmVjdGlvbnNTZXR0aW5nc1RhYih0aGlzLmFwcCwgdGhpcyk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgU21hcnRDb25uZWN0aW9uc1NldHRpbmdzVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiBpbXBsZW1lbnRzIFBsdWdpblNldHRpbmdUYWJDb25jcmV0ZSB7XG4gICAgYmFzZTogU21hcnRDb25uZWN0aW9uc1NldHRpbmdzVGFiQmFzZTtcblxuICBjb25zdHJ1Y3RvcihhcHAsIHBsdWdpbikge1xuICAgIHN1cGVyKGFwcCwgcGx1Z2luKTtcbiAgICB0aGlzLmJhc2UgPSBuZXcgU21hcnRDb25uZWN0aW9uc1NldHRpbmdzVGFiQmFzZSh0aGlzKTtcbiAgfVxuXG4gIGRpc3BsYXkoKSB7XG4gICAgICB0aGlzLmJhc2UuZGlzcGxheSgpO1xuICB9XG59XG4iLCAiaW1wb3J0IHtKU09OVmFsdWV9IGZyb20gXCIuLi9jb21tb25UeXBlc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNldHRpbmcge1xuICAgIHNldHRpbmdWYWx1ZTogSlNPTlZhbHVlIHwgU2V0dGluZ3M7XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICBkZWZhdWx0OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2V0dGluZ3Mge1xuICAgIFtzZXR0aW5nTmFtZTogc3RyaW5nXTogU2V0dGluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb25maWd1cmFibGUge1xuICAgIHNldHRpbmdzOiBTZXR0aW5nc1xufVxuXG5leHBvcnQgY29uc3QgbG9hZFNldHRpbmdzID0gYXN5bmMgKFxuICAgIGNvbmZpZ3VyYWJsZTogQ29uZmlndXJhYmxlLFxuICAgIGRlZmF1bHRTZXR0aW5nczogU2V0dGluZ3MsXG4gICAgbG9hZEZ1bmN0aW9uOiAoKSA9PiBQcm9taXNlPFNldHRpbmdzIHwgbnVsbD4sXG4pOiBQcm9taXNlPFNldHRpbmdzPiA9PiB7XG4gICAgY29uc3Qgc2V0dGluZ3MgPSBhd2FpdCBsb2FkRnVuY3Rpb24oKSB8fCBkZWZhdWx0U2V0dGluZ3M7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHNldHRpbmdzKTtcbn1cbiIsICJ7XG4gIFwiREVGQVVMVF9TRVRUSU5HU1wiOiB7XG4gICAgXCJhbGdvcml0aG1cIjogXCJPcGVuQUlcIixcbiAgICBcImFwaUtleVwiOiBbXSxcbiAgICBcImZpbGVFeGNsdXNpb25zXCI6IFtdLFxuICAgIFwiZm9sZGVyRXhjbHVzaW9uc1wiOiBbXSxcbiAgICBcImhlYWRlckV4Y2x1c2lvbnNcIjogW10sXG4gICAgXCJwYXRoT25seVwiOiBbXSxcbiAgICBcInNob3dGdWxsUGF0aFwiOiBmYWxzZSxcbiAgICBcImxvZ1JlbmRlclwiOiBmYWxzZSxcbiAgICBcImxvZ1JlbmRlckZpbGVzXCI6IGZhbHNlLFxuICAgIFwic2tpcFNlY3Rpb25zXCI6IGZhbHNlXG4gIH1cbn0iLCAiaW1wb3J0IHtDb25maWd1cmFibGUsIGxvYWRTZXR0aW5nc30gZnJvbSBcIi4vc2V0dGluZ3Mvc2V0dGluZ3NcIjtcbmltcG9ydCB7U0NTZXR0aW5nc30gZnJvbSBcIi4vc2V0dGluZ3Mvc2NTZXR0aW5nc1wiO1xuaW1wb3J0IHtERUZBVUxUX1NFVFRJTkdTfSBmcm9tIFwiLi4vZGF0YS9kZWZhdWx0U2V0dGluZ3MuanNvblwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBsdWdpbkNvbmNyZXRlIHtcbiAgICBjcmVhdGVDb25jcmV0ZVNldHRpbmdzVGFiKCk6IFBsdWdpblNldHRpbmdUYWJDb25jcmV0ZTtcblxuICAgIC8vIGV4cG9zZWQgb2JzaWRpYW4uUGx1Z2luIGludGVyZmFjZVxuICAgIGxvYWREYXRhKCk6IFByb21pc2U8YW55PjtcblxuICAgIHNhdmVEYXRhKGRhdGE6IGFueSk6IFByb21pc2U8YW55PjtcblxuICAgIGFkZFNldHRpbmdUYWIoc2V0dGluZ1RhYjogUGx1Z2luU2V0dGluZ1RhYkNvbmNyZXRlKTogdm9pZDtcbn1cblxuZXhwb3J0IGNsYXNzIFNtYXJ0Q29ubmVjdGlvbnNQbHVnaW5CYXNlIGltcGxlbWVudHMgQ29uZmlndXJhYmxlIHtcbiAgICAvKipcbiAgICAgKiBUaGlzIGNsYXNzIGlzIGFuIGFkYXB0ZXIgKD8gdG9kbzogY2hlY2sgaWYgdHJ1ZSkgdG8gZmFjaWxpdGF0ZSB1bml0LXRlc3Rpbmcgd2l0aCBPYnNpZGlhbi5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgcGx1Z2luQ29uY3JldGU6IFBsdWdpbkNvbmNyZXRlO1xuICAgIHNldHRpbmdzOiBTQ1NldHRpbmdzO1xuXG4gICAgY29uc3RydWN0b3IocGx1Z2luQ29uY3JldGU6IFBsdWdpbkNvbmNyZXRlKSB7XG4gICAgICAgIHRoaXMucGx1Z2luQ29uY3JldGUgPSBwbHVnaW5Db25jcmV0ZTtcbiAgICB9XG5cbiAgICBhc3luYyBvbkxvYWQoKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBhd2FpdCBsb2FkU2V0dGluZ3MoXG4gICAgICAgICAgICB0aGlzLCBERUZBVUxUX1NFVFRJTkdTLCB0aGlzLnBsdWdpbkNvbmNyZXRlLmxvYWREYXRhLmJpbmQodGhpcy5wbHVnaW5Db25jcmV0ZSlcbiAgICAgICAgKSBhcyBTQ1NldHRpbmdzO1xuICAgICAgICB0aGlzLmFkZFNldHRpbmdUYWIoKTtcbiAgICB9XG5cbiAgICBhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMucGx1Z2luQ29uY3JldGUuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG4gICAgfVxuXG4gICAgYWRkU2V0dGluZ1RhYigpIHtcbiAgICAgICAgY29uc3QgY29uY3JldGVTZXR0aW5nc1RhYiA9IHRoaXMucGx1Z2luQ29uY3JldGUuY3JlYXRlQ29uY3JldGVTZXR0aW5nc1RhYigpO1xuICAgICAgICByZXR1cm4gdGhpcy5wbHVnaW5Db25jcmV0ZS5hZGRTZXR0aW5nVGFiKGNvbmNyZXRlU2V0dGluZ3NUYWIpO1xuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBQbHVnaW5TZXR0aW5nVGFiQ29uY3JldGUge1xuICAgIGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudDtcbn1cblxuZXhwb3J0IGNsYXNzIFNtYXJ0Q29ubmVjdGlvbnNTZXR0aW5nc1RhYkJhc2Uge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgc2V0dGluZ3NUYWJDb25jcmV0ZTogUGx1Z2luU2V0dGluZ1RhYkNvbmNyZXRlO1xuXG4gICAgY29uc3RydWN0b3Ioc2V0dGluZ3NUYWJDb25jcmV0ZTogUGx1Z2luU2V0dGluZ1RhYkNvbmNyZXRlKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3NUYWJDb25jcmV0ZSA9IHNldHRpbmdzVGFiQ29uY3JldGU7XG4gICAgfVxuXG4gICAgZGlzcGxheSgpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgY29udGFpbmVyRWxcbiAgICAgICAgfSA9IHRoaXMuc2V0dGluZ3NUYWJDb25jcmV0ZTtcbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTtcbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoXCJoMlwiLCB7XG4gICAgICAgICAgICB0ZXh0OiBcIlNtYXJ0IENvbm5lY3Rpb25zIFNldHRpbmdzXCJcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQXNFOzs7QUNnQi9ELElBQU0sZUFBZSxPQUN4QixjQUNBLGlCQUNBLGlCQUNvQjtBQUNwQixRQUFNLFdBQVcsTUFBTSxhQUFhLEtBQUs7QUFDekMsU0FBTyxPQUFPLE9BQU8sQ0FBQyxHQUFHLFFBQVE7QUFDckM7OztBQ3RCRSx1QkFBb0I7QUFBQSxFQUNsQixXQUFhO0FBQUEsRUFDYixRQUFVLENBQUM7QUFBQSxFQUNYLGdCQUFrQixDQUFDO0FBQUEsRUFDbkIsa0JBQW9CLENBQUM7QUFBQSxFQUNyQixrQkFBb0IsQ0FBQztBQUFBLEVBQ3JCLFVBQVksQ0FBQztBQUFBLEVBQ2IsY0FBZ0I7QUFBQSxFQUNoQixXQUFhO0FBQUEsRUFDYixnQkFBa0I7QUFBQSxFQUNsQixjQUFnQjtBQUNsQjs7O0FDR0ssSUFBTSw2QkFBTixNQUF5RDtBQUFBLEVBUTVELFlBQVksZ0JBQWdDO0FBSDVDO0FBQUE7QUFBQTtBQUFBO0FBQUEsd0JBQWlCO0FBQ2pCO0FBR0ksU0FBSyxpQkFBaUI7QUFBQSxFQUMxQjtBQUFBLEVBRUEsTUFBTSxTQUFTO0FBQ1gsU0FBSyxXQUFXLE1BQU07QUFBQSxNQUNsQjtBQUFBLE1BQU07QUFBQSxNQUFrQixLQUFLLGVBQWUsU0FBUyxLQUFLLEtBQUssY0FBYztBQUFBLElBQ2pGO0FBQ0EsU0FBSyxjQUFjO0FBQUEsRUFDdkI7QUFBQSxFQUVBLE1BQU0sZUFBZTtBQUNqQixVQUFNLEtBQUssZUFBZSxTQUFTLEtBQUssUUFBUTtBQUFBLEVBQ3BEO0FBQUEsRUFFQSxnQkFBZ0I7QUFDWixVQUFNLHNCQUFzQixLQUFLLGVBQWUsMEJBQTBCO0FBQzFFLFdBQU8sS0FBSyxlQUFlLGNBQWMsbUJBQW1CO0FBQUEsRUFDaEU7QUFDSjtBQU1PLElBQU0sa0NBQU4sTUFBc0M7QUFBQSxFQUd6QyxZQUFZLHFCQUErQztBQUYzRCx3QkFBaUI7QUFHYixTQUFLLHNCQUFzQjtBQUFBLEVBQy9CO0FBQUEsRUFFQSxVQUFVO0FBQ04sVUFBTTtBQUFBLE1BQ0Y7QUFBQSxJQUNKLElBQUksS0FBSztBQUNULGdCQUFZLE1BQU07QUFDbEIsZ0JBQVksU0FBUyxNQUFNO0FBQUEsTUFDdkIsTUFBTTtBQUFBLElBQ1YsQ0FBQztBQUFBLEVBQ0w7QUFDSjs7O0FIeERBLElBQXFCLHlCQUFyQixjQUFvRCx1QkFBaUM7QUFBQSxFQUdqRixZQUFZLEtBQVUsVUFBMEI7QUFDNUMsVUFBTSxLQUFLLFFBQVE7QUFIdkI7QUFJSSxTQUFLLE9BQU8sSUFBSSwyQkFBMkIsSUFBSTtBQUFBLEVBQ25EO0FBQUEsRUFFQSxNQUFNLFNBQVM7QUFDWCxVQUFNLEtBQUssS0FBSyxPQUFPO0FBQUEsRUFDM0I7QUFBQSxFQUVBLDRCQUFzRDtBQUNsRCxXQUFPLElBQUksNEJBQTRCLEtBQUssS0FBSyxJQUFJO0FBQUEsRUFDekQ7QUFDSjtBQUVPLElBQU0sOEJBQU4sY0FBMEMsaUNBQXFEO0FBQUEsRUFHcEcsWUFBWSxLQUFLLFFBQVE7QUFDdkIsVUFBTSxLQUFLLE1BQU07QUFIakI7QUFJQSxTQUFLLE9BQU8sSUFBSSxnQ0FBZ0MsSUFBSTtBQUFBLEVBQ3REO0FBQUEsRUFFQSxVQUFVO0FBQ04sU0FBSyxLQUFLLFFBQVE7QUFBQSxFQUN0QjtBQUNGOyIsCiAgIm5hbWVzIjogW10KfQo=
