/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SmartConnectionsPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/settings/settings.ts
var loadSettings = async (configurable, defaultSettings, loadFunction) => {
  const loaded = await loadFunction();
  return Object.assign({}, defaultSettings, loaded);
};

// data/defaultSettings.json
var DEFAULT_SETTINGS = {
  algorithm: "OpenAI",
  apiKey: [],
  fileExclusions: [],
  folderExclusions: [],
  headerExclusions: [],
  pathOnly: [],
  showFullPath: false,
  logRender: false,
  logRenderFiles: false,
  skipSections: false
};

// src/plugin.ts
var SmartConnectionsPluginBase = class {
  constructor() {
    __publicField(this, "settings");
  }
  async onload() {
    this.settings = await loadSettings(this, DEFAULT_SETTINGS, this.loadData);
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  // we mock the Plugin interface to allow unit-testing (see https://github.com/obsidianmd/obsidian-api/issues/13)
  async loadData() {
    throw Error("Not implemented");
  }
  async saveData(data) {
    throw Error("Not implemented");
  }
};

// main.ts
var SmartConnectionsPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    __publicField(this, "base");
  }
  async onload() {
    this.base = new SmartConnectionsPluginBase();
    this.base.loadData = this.loadData;
    this.base.saveData = this.saveData;
    await this.base.onload();
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJzcmMvc2V0dGluZ3Mvc2V0dGluZ3MudHMiLCAiZGF0YS9kZWZhdWx0U2V0dGluZ3MuanNvbiIsICJzcmMvcGx1Z2luLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQge1BsdWdpbn0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgU21hcnRDb25uZWN0aW9uc1BsdWdpbkJhc2UgZnJvbSBcIi4vc3JjL3BsdWdpblwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTbWFydENvbm5lY3Rpb25zUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcbiAgICBiYXNlOiBTbWFydENvbm5lY3Rpb25zUGx1Z2luQmFzZTtcblxuICAgIGFzeW5jIG9ubG9hZCgpIHtcbiAgICAgICAgdGhpcy5iYXNlID0gbmV3IFNtYXJ0Q29ubmVjdGlvbnNQbHVnaW5CYXNlKCk7XG4gICAgICAgIHRoaXMuYmFzZS5sb2FkRGF0YSA9IHRoaXMubG9hZERhdGE7XG4gICAgICAgIHRoaXMuYmFzZS5zYXZlRGF0YSA9IHRoaXMuc2F2ZURhdGE7XG4gICAgICAgIGF3YWl0IHRoaXMuYmFzZS5vbmxvYWQoKTtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHtKU09OT2JqZWN0fSBmcm9tIFwiLi4vY29tbW9uVHlwZXNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBTZXR0aW5ncyBleHRlbmRzIEpTT05PYmplY3QgeyB9XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmlndXJhYmxlIHtcbiAgICBzZXR0aW5nczogU2V0dGluZ3Ncbn1cblxuZXhwb3J0IGNvbnN0IGxvYWRTZXR0aW5ncyA9IGFzeW5jIChcbiAgICBjb25maWd1cmFibGU6IENvbmZpZ3VyYWJsZSxcbiAgICBkZWZhdWx0U2V0dGluZ3M6IFNldHRpbmdzLFxuICAgIGxvYWRGdW5jdGlvbjogKCkgPT4gUHJvbWlzZTxTZXR0aW5ncz4sXG4pOiBQcm9taXNlPFNldHRpbmdzPiA9PiB7XG4gICAgY29uc3QgbG9hZGVkID0gYXdhaXQgbG9hZEZ1bmN0aW9uKCk7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRTZXR0aW5ncywgbG9hZGVkKTtcbn1cbiIsICJ7XG4gIFwiREVGQVVMVF9TRVRUSU5HU1wiOiB7XG4gICAgXCJhbGdvcml0aG1cIjogXCJPcGVuQUlcIixcbiAgICBcImFwaUtleVwiOiBbXSxcbiAgICBcImZpbGVFeGNsdXNpb25zXCI6IFtdLFxuICAgIFwiZm9sZGVyRXhjbHVzaW9uc1wiOiBbXSxcbiAgICBcImhlYWRlckV4Y2x1c2lvbnNcIjogW10sXG4gICAgXCJwYXRoT25seVwiOiBbXSxcbiAgICBcInNob3dGdWxsUGF0aFwiOiBmYWxzZSxcbiAgICBcImxvZ1JlbmRlclwiOiBmYWxzZSxcbiAgICBcImxvZ1JlbmRlckZpbGVzXCI6IGZhbHNlLFxuICAgIFwic2tpcFNlY3Rpb25zXCI6IGZhbHNlXG4gIH1cbn0iLCAiaW1wb3J0IHtDb25maWd1cmFibGUsIGxvYWRTZXR0aW5nc30gZnJvbSBcIi4vc2V0dGluZ3Mvc2V0dGluZ3NcIjtcbmltcG9ydCB7U0NTZXR0aW5nc30gZnJvbSBcIi4vc2V0dGluZ3Mvc2NTZXR0aW5nc1wiO1xuaW1wb3J0IHtERUZBVUxUX1NFVFRJTkdTfSBmcm9tIFwiLi4vZGF0YS9kZWZhdWx0U2V0dGluZ3MuanNvblwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTbWFydENvbm5lY3Rpb25zUGx1Z2luQmFzZSBpbXBsZW1lbnRzIENvbmZpZ3VyYWJsZSB7XG4gICAgc2V0dGluZ3M6IFNDU2V0dGluZ3M7XG5cbiAgICBhc3luYyBvbmxvYWQoKSB7XG4gICAgICAgIC8vIENvbmZpZ3VyZSByZXNvdXJjZXMgbmVlZGVkIGJ5IHRoZSBwbHVnaW4uXG5cbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IGF3YWl0IGxvYWRTZXR0aW5ncyh0aGlzLCBERUZBVUxUX1NFVFRJTkdTICwgdGhpcy5sb2FkRGF0YSkgYXMgU0NTZXR0aW5ncztcbiAgICB9XG5cbiAgICBhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG4gICAgfVxuXG4gICAgLy8gd2UgbW9jayB0aGUgUGx1Z2luIGludGVyZmFjZSB0byBhbGxvdyB1bml0LXRlc3RpbmcgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vb2JzaWRpYW5tZC9vYnNpZGlhbi1hcGkvaXNzdWVzLzEzKVxuICAgIGFzeW5jIGxvYWREYXRhKCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHRocm93ICBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgICB9XG5cbiAgICBhc3luYyBzYXZlRGF0YShkYXRhOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICB0aHJvdyAgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWRcIik7XG4gICAgfVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUFxQjs7O0FDUWQsSUFBTSxlQUFlLE9BQ3hCLGNBQ0EsaUJBQ0EsaUJBQ29CO0FBQ3BCLFFBQU0sU0FBUyxNQUFNLGFBQWE7QUFDbEMsU0FBTyxPQUFPLE9BQU8sQ0FBQyxHQUFHLGlCQUFpQixNQUFNO0FBQ3BEOzs7QUNkRSx1QkFBb0I7QUFBQSxFQUNsQixXQUFhO0FBQUEsRUFDYixRQUFVLENBQUM7QUFBQSxFQUNYLGdCQUFrQixDQUFDO0FBQUEsRUFDbkIsa0JBQW9CLENBQUM7QUFBQSxFQUNyQixrQkFBb0IsQ0FBQztBQUFBLEVBQ3JCLFVBQVksQ0FBQztBQUFBLEVBQ2IsY0FBZ0I7QUFBQSxFQUNoQixXQUFhO0FBQUEsRUFDYixnQkFBa0I7QUFBQSxFQUNsQixjQUFnQjtBQUNsQjs7O0FDUkYsSUFBcUIsNkJBQXJCLE1BQXdFO0FBQUEsRUFBeEU7QUFDSTtBQUFBO0FBQUEsRUFFQSxNQUFNLFNBQVM7QUFHWCxTQUFLLFdBQVcsTUFBTSxhQUFhLE1BQU0sa0JBQW1CLEtBQUssUUFBUTtBQUFBLEVBQzdFO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFDakIsVUFBTSxLQUFLLFNBQVMsS0FBSyxRQUFRO0FBQUEsRUFDckM7QUFBQTtBQUFBLEVBR0EsTUFBTSxXQUF5QjtBQUMzQixVQUFPLE1BQU0saUJBQWlCO0FBQUEsRUFDbEM7QUFBQSxFQUVBLE1BQU0sU0FBUyxNQUF5QjtBQUNwQyxVQUFPLE1BQU0saUJBQWlCO0FBQUEsRUFDbEM7QUFDSjs7O0FIdEJBLElBQXFCLHlCQUFyQixjQUFvRCx1QkFBTztBQUFBLEVBQTNEO0FBQUE7QUFDSTtBQUFBO0FBQUEsRUFFQSxNQUFNLFNBQVM7QUFDWCxTQUFLLE9BQU8sSUFBSSwyQkFBMkI7QUFDM0MsU0FBSyxLQUFLLFdBQVcsS0FBSztBQUMxQixTQUFLLEtBQUssV0FBVyxLQUFLO0FBQzFCLFVBQU0sS0FBSyxLQUFLLE9BQU87QUFBQSxFQUMzQjtBQUNKOyIsCiAgIm5hbWVzIjogW10KfQo=
